image: docker:stable

stages:
 - test
 - build
 - deploy

variables:
  DOCKER_DIND_IMAGE: "docker:19.03.12-dind"
  DOCKER_IMAGE: "docker:19.03.12"
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled


sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
  stage: test
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=bmbl-discord
  allow_failure: true
  only:
    - master
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache


build prod:
  image: ${DOCKER_IMAGE}
  services:
    - ${DOCKER_DIND_IMAGE}
  stage: build
  script:
    # install composer and get dependencies
    - cp $ENV_FILE .env
    - docker build -t ${CI_REGISTRY_IMAGE}:latest --build-arg BUILD_PROD=true -f docker/Dockerfile ./
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}:latest
  only:
    - master


# Push the image to Docker Swarm as service and run a rolling deploy
push to production:
  stage: deploy
  variables:
    DOCKER_HOST: ssh://$SSH_USER@$SSH_HOST
  image: $DOCKER_IMAGE
  script:
    - apk add openssh --no-cache
    - mkdir -p ~/.ssh/ &&  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_KEY && ssh-add $SSH_KEY
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack deploy --prune --with-registry-auth --compose-file=docker-stack-compose.yml ${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}
  dependencies: []
  environment:
    name: discord-bumblebee-fm
  only:
    - master
